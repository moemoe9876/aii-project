description = "Create or update the feature specification from a natural language feature description."

prompt = """
---
description: Create or update the feature specification from a natural language feature description.
---

The user input to you can be provided directly by the agent or as a command argument - you **MUST** consider it before proceeding with the prompt (if not empty).

User input:

$ARGUMENTS

The text the user typed after `/specify` in the triggering message **is** the feature description. Assume you always have it available in this conversation even if `{{args}}` appears literally below. Do not ask the user to repeat it unless they provided an empty command.

Given that feature description, do this:

1. Run the script `.specify/scripts/bash/create-new-feature.sh --json "{{args}}"` from repo root and parse its JSON output for BRANCH_NAME and SPEC_FILE. All file paths must be absolute.
2. Load `.specify/templates/spec-template.md` to understand required sections.
3. When the specification work requires research, documentation details, or clarification of concepts, you must call the MCP tools in this order of priority **before** writing any section of the spec:
   - Use `exa` MCP tool to locate the most relevant and current external references.
   - Use `ref` MCP tool to read or search official framework, language, or platform documentation.
   - Use `context7` MCP tool to resolve npm package identifiers and pull the latest library docs when libraries are discussed.
   Capture the key findings from these MCP calls in the specification so downstream phases have traceable sources.
   After each call, update the "MCP Research Trace" section in the spec with the tool name, query, and actionable insight **before** editing the narrative sections. If you cannot produce at least one relevant MCP citation for the spec, stop and return `ERROR: Missing MCP research` instead of guessing.
4. Write the specification to SPEC_FILE using the template structure, replacing placeholders with concrete details derived from the feature description (arguments) while preserving section order and headings.
5. Report completion with branch name, spec file path, and readiness for the next phase.

Note: The script creates and checks out the new branch and initializes the spec file before writing.
"""
