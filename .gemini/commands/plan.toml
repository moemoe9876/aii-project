description = "Execute the implementation planning workflow using the plan template to generate design artifacts."

prompt = """
---
description: Execute the implementation planning workflow using the plan template to generate design artifacts.
---

The user input to you can be provided directly by the agent or as a command argument - you **MUST** consider it before proceeding with the prompt (if not empty).

User input:

$ARGUMENTS

Given the implementation details provided as an argument, do this:

1. Run `.specify/scripts/bash/setup-plan.sh --json` from the repo root and parse JSON for FEATURE_SPEC, IMPL_PLAN, SPECS_DIR, BRANCH. All future file paths must be absolute.
2. Read and analyze the feature specification to understand:
   - The feature requirements and user stories
   - Functional and non-functional requirements
   - Success criteria and acceptance criteria
   - Any technical constraints or dependencies mentioned

3. Read the constitution at `.specify/memory/constitution.md` to understand constitutional requirements.

4. Immediately perform the mandatory MCP discovery sequence **before editing or generating any artifact**:
   - Use `exa` MCP tool first to locate up-to-date references or uncover missing context.
   - Use `ref` MCP tool to read or search official documentation for frameworks, languages, testing tools, or infrastructure.
   - Use `context7` MCP tool to resolve npm package identifiers and pull the authoritative docs when JavaScript libraries are in scope.
   Do **not** create or modify `research.md`, `data-model.md`, `contracts/`, or `quickstart.md` until the `MCP Usage Log` section in plan.md contains entries for the completed MCP calls. If the log is missing required entries, return `ERROR: MCP discovery incomplete`.
   Log key outputs from these MCP calls into `research.md` and other artifacts as directed by the templates so later commands inherit verified sources.

5. Execute the implementation plan template:
   - Load `.specify/templates/plan-template.md` (already copied to IMPL_PLAN path)
   - Set Input path to FEATURE_SPEC
   - Run the Execution Flow (main) function steps 1-10
   - The template is self-contained and executable
   - Follow error handling and gate checks as specified
   - Let the template guide artifact generation in $SPECS_DIR:
     * Phase 0 generates research.md
     * Phase 1 generates data-model.md, contracts/, quickstart.md
     * Phase 2 generates tasks.md
   - Incorporate user-provided details from arguments into Technical Context: {{args}}
   - Update Progress Tracking as you complete each phase

   **MCP Enforcement**:
   - Before drafting or updating `research.md`, you must invoke the `exa` MCP tool to gather or confirm current references, then follow up with either the `ref` MCP tool or `context7` MCP tool (whichever best matches the technology surface).
   - Before producing `data-model.md`, `contracts/`, or `quickstart.md`, ensure you have invoked the `ref` MCP tool (and `context7` when npm packages are discussed) so that every design artifact cites vetted guidance.
   - After each MCP call, append a concise entry to the "MCP Usage Log" section in the plan that records the tool, query, and how the result influenced the artifact **before** touching the related artifact file.
   - If you reach the end of Phase 0 or Phase 1 without the required MCP calls logged, or if any artifact was created without a preceding log entry, stop and return `ERROR: MCP tooling requirements not satisfied` instead of generating incomplete artifacts.

6. Verify execution completed:
   - Check Progress Tracking shows all phases complete
   - Ensure all required artifacts were generated
   - Confirm no ERROR states in execution

7. Report results with branch name, file paths, and generated artifacts.


Use absolute paths with the repository root for all file operations to avoid path issues.
"""
